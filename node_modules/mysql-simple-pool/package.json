{
  "name": "mysql-simple-pool",
  "version": "1.0.1",
  "description": "Simple connection pooling for Node and MySQL.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Deathspike/mysql-simple-pool.git"
  },
  "keywords": [
    "mysql",
    "connection",
    "pool",
    "simple"
  ],
  "author": {
    "name": "Roel van Uden"
  },
  "license": "MIT",
  "dependencies": {
    "mysql": "~2.0.0-alpha5"
  },
  "devDependencies": {},
  "readme": "mysql-simple-pool\r\n=================\r\n\r\nSimple connection pooling for Node and MySQL. \r\n\r\n## Installation\r\n\r\n\t$ npm install mysql-simple-pool\r\n\r\n## Features\r\n\r\n\t* Connection pooling for [mysql](https://github.com/felixge/node-mysql) by felixge.\r\n\t* Dispose is possible to remove all connections.\r\n\t* Simple wrapper. Functionality has not been touched at all.\r\n\t\r\n## Usage\r\n\r\nThe connection pool only provides connection management. Queries are executed on the first available managed connection. For all the specifications, read the excellent documentation written by felixge.\r\n\r\n### Instantiating a connection pool\r\n\r\nA connection pool has to be instantiated. You can provide *maximumNumberOfConnections* and *options*. Options are forwarded when a managed connection is established.\r\n\r\n\t// Include the module.\r\n\tvar Pool = require('mysql-simple-pool');\r\n\t// Instantiate the pool. Use a maximum of 100 connections.\r\n\tvar pool = new Pool(100, {\r\n\t\thost: 'localhost',\r\n\t\tuser: 'root',\r\n\t\tpassword: 'root',\r\n\t\tdatabase: 'test'\r\n\t});\r\n\t\r\n### Performing queries\r\n\r\nQueries are queued and executed on the first available connection.\r\n\r\n\tpool.query('select * from posts', function(err, results) {\r\n\t\tconsole.log(results);\r\n\t});\r\n\t\r\n### Claiming a managed connection\r\n\r\nA connection can be claimed, at which point is is no longer managed.\r\n\r\n\tpool.claim(function(err, conn) {\r\n\t\t// I can do sequential queries here. This may be required when\r\n\t\t// you wish to do a transaction, since the queries have to be \r\n\t\t// sequential.\r\n\t\tconn.end();\r\n\t});\r\n\t\r\nEnd the connection to place it back into the connection pool.\r\n\r\n### Disposing the connection pool\r\n\r\nA node application will not close with open connections.\r\n\r\n\tpool.dispose();\r\n\t\r\nDispose ensures all pending queries finish, after which all connections are cleared.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Deathspike/mysql-simple-pool/issues"
  },
  "homepage": "https://github.com/Deathspike/mysql-simple-pool",
  "_id": "mysql-simple-pool@1.0.1",
  "_from": "mysql-simple-pool@"
}
